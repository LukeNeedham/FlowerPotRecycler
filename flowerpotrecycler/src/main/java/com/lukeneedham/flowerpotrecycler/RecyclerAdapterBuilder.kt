package com.lukeneedham.flowerpotrecycler

import android.content.Context
import android.view.View
import android.view.ViewGroup
import androidx.annotation.LayoutRes
import com.lukeneedham.flowerpotrecycler.autoadapter.AutoGeneratedRecyclerAdapter
import com.lukeneedham.flowerpotrecycler.autoadapter.builderbinder.XMLBuilderBinder
import com.lukeneedham.flowerpotrecycler.autoadapter.builderbinder.declarative.DeclarativeBindingDsl
import com.lukeneedham.flowerpotrecycler.autoadapter.builderbinder.declarative.DeclarativeBuilderBinder
import com.lukeneedham.flowerpotrecycler.delegatedadapter.DelegatedRecyclerAdapter
import com.lukeneedham.flowerpotrecycler.delegatedadapter.RecyclerItemView
import com.lukeneedham.flowerpotrecycler.delegatedadapter.config.LinearAdapterConfig
import com.lukeneedham.flowerpotrecycler.delegatedadapter.config.RecyclerAdapterConfig

object RecyclerAdapterBuilder {

    /**
     * Auto-generate an adapter.
     * To be used when creating the item View programmatically (for example, with Anko DSL Layouts)
     *
     * Use [onItem][com.lukeneedham.flowerpotrecycler.autoadapter.builderbinder.declarative.DeclarativeBindingDsl.onItem]
     * within your builder to update the UI when an item is bound.
     * @param builder The callback for building item Views
     * @param config Optional configuration for the adapter
     */
    fun <ItemType> fromDeclarativeDsl(
        config: RecyclerAdapterConfig<ItemType> = getDefaultAdapterConfig(),
        builder: DeclarativeBindingDsl<ItemType>.(ViewGroup) -> View
    ): AutoGeneratedRecyclerAdapter<ItemType> {
        val builderBinder = object : DeclarativeBuilderBinder<ItemType>() {
            override val builder = builder
        }
        return AutoGeneratedRecyclerAdapter(builderBinder, config)
    }

    /**
     * Auto-generate an adapter.
     * To be used when creating the item View from inflating an XML layout.
     * @param layoutResId The XML layout resource ID to inflate to build the View
     * @param binder The callback for binding each item to its View
     * @param config Optional configuration for the adapter
     */
    fun <ItemType> fromXml(
        @LayoutRes layoutResId: Int,
        config: RecyclerAdapterConfig<ItemType> = getDefaultAdapterConfig(),
        binder: (Int, ItemType, View) -> Unit
    ): AutoGeneratedRecyclerAdapter<ItemType> {
        val builderBinder = object : XMLBuilderBinder<ItemType>(layoutResId) {
            override fun bind(position: Int, item: ItemType, itemView: View) {
                binder(position, item, itemView)
            }
        }
        return AutoGeneratedRecyclerAdapter(builderBinder, config)
    }

    /**
     * Setup without writing an adapter.
     * To be used when View logic is contained within its own class, and you want to instantiate the View object yourself.
     * @param createView The function to instantiate your [ItemViewType] class
     * @param config Configuration for the adapter
     */
    fun <ItemType, ItemViewType> fromViewCreator(
        config: RecyclerAdapterConfig<ItemType> = getDefaultAdapterConfig(),
        createView: (Context) -> ItemViewType
    ): DelegatedRecyclerAdapter<ItemType, ItemViewType>
            where ItemViewType : View, ItemViewType : RecyclerItemView<ItemType> =
        object : DelegatedRecyclerAdapter<ItemType, ItemViewType>(config) {
            override fun createItemView(context: Context) = createView(context)
        }

    /**
     * Setup without writing an adapter.
     * To be used when View logic is contained within its own class.
     *
     * The type parameter 'ItemViewType' is the type of the View class, which will handle binding items.
     * This class is automatically instantiated using its View(Context) constructor.
     *
     * @param config Configuration for the adapter
     */
    inline fun <ItemType, reified ItemViewType> fromView(
        config: RecyclerAdapterConfig<ItemType> = getDefaultAdapterConfig()
    ): DelegatedRecyclerAdapter<ItemType, ItemViewType>
            where ItemViewType : View, ItemViewType : RecyclerItemView<ItemType> =
        fromViewClass(ItemViewType::class.java, config)

    /**
     * Setup without writing an adapter.
     * To be used when View logic is contained within its own class.
     * @param itemViewClass The [ItemViewType] class which will handle binding items.
     * @param config Configuration for the adapter
     * This class is automatically instantiated using its View(context: Context) constructor.
     */
    @JvmStatic
    fun <ItemType, ItemViewType> fromViewClass(
        itemViewClass: Class<ItemViewType>,
        config: RecyclerAdapterConfig<ItemType> = getDefaultAdapterConfig()
    ): DelegatedRecyclerAdapter<ItemType, ItemViewType>
            where ItemViewType : View, ItemViewType : RecyclerItemView<ItemType> =
        object : DelegatedRecyclerAdapter<ItemType, ItemViewType>(config) {
            override fun createItemView(context: Context) =
                itemViewClass.getConstructor(Context::class.java).newInstance(context)
        }

    fun <ItemType> getDefaultAdapterConfig() = LinearAdapterConfig<ItemType>()
}