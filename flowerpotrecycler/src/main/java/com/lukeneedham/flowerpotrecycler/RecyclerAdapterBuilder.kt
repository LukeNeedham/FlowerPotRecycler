package com.lukeneedham.flowerpotrecycler

import android.view.View
import android.view.ViewGroup
import androidx.annotation.LayoutRes
import androidx.recyclerview.widget.RecyclerView
import com.lukeneedham.flowerpotrecycler.autoadapter.AutoGeneratedRecyclerAdapter
import com.lukeneedham.flowerpotrecycler.autoadapter.builderbinder.XMLBuilderBinder
import com.lukeneedham.flowerpotrecycler.autoadapter.builderbinder.databinding.DataBindingBuilderBinder
import com.lukeneedham.flowerpotrecycler.autoadapter.builderbinder.databinding.DataBindingDsl
import com.lukeneedham.flowerpotrecycler.reflectionadapter.ReflectionRecyclerAdapter
import com.lukeneedham.flowerpotrecycler.simpleadapter.SimpleRecyclerItemView

object RecyclerAdapterBuilder {

    /**
     * Auto-generate an adapter. To be used when creating the item View programmatically
     * (for example, with Anko DSL Layouts)
     *
     * Use [onItem][com.lukeneedham.flowerpotrecycler.autoadapter.builderbinder.databinding.DataBindingDsl.onItem]
     * within your builder to update the UI when an item is bound.
     * @param items The data to be shown in the [RecyclerView]
     * @param builder The callback for building item Views
     */
    fun <ItemType> withItems(
        items: List<ItemType>,
        builder: DataBindingDsl<ItemType>.(ViewGroup) -> View
    ): AutoGeneratedRecyclerAdapter<ItemType> {
        val builderBinder = object : DataBindingBuilderBinder<ItemType>() {
            override val builder = builder
        }
        return AutoGeneratedRecyclerAdapter(
            items,
            builderBinder
        )
    }

    /**
     * Auto-generate an adapter. To be used when creating the item View from inflating an XML layout.
     * @param items The data to be shown in the [RecyclerView]
     * @param layoutResId The XML layout resource ID to inflate to build the View
     * @param binder The callback for binding each item to its View
     */
    fun <ItemType> withItems(
        items: List<ItemType>,
        @LayoutRes layoutResId: Int,
        binder: (Int, ItemType, View) -> Unit
    ): AutoGeneratedRecyclerAdapter<ItemType> {
        val builderBinder = object : XMLBuilderBinder<ItemType>(layoutResId) {
            override fun bind(position: Int, item: ItemType, itemView: View) {
                binder(position, item, itemView)
            }
        }
        return AutoGeneratedRecyclerAdapter(
            items,
            builderBinder
        )
    }


    /**
     * Setup without writing an adapter. To be used when view logic is contained within its own class.
     *
     * The type parameter 'ItemViewType' is the type of the view class, which will handle binding items.
     *
     * @param items The data to be shown in the [RecyclerView]
     */
    inline fun <ItemType, reified ItemViewType> withItems(items: List<ItemType>)
            where ItemViewType : View, ItemViewType : SimpleRecyclerItemView<ItemType> =
        withItems(items, ItemViewType::class.java)


    /**
     * Setup without writing an adapter. To be used when view logic is contained within its own class.
     * @param items The data to be shown in the [RecyclerView]
     * @param itemViewClass The view class which will handle binding items
     */
    @JvmStatic
    fun <ItemType, ItemViewType> withItems(
        items: List<ItemType>,
        itemViewClass: Class<ItemViewType>
    )
            where ItemViewType : View, ItemViewType : SimpleRecyclerItemView<ItemType> =
        ReflectionRecyclerAdapter.create(items, itemViewClass)
}